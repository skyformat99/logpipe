# 此文件由makelocal.sh自动生成
MAKEFILE_POSTFIX=.Linux
# 此文件由makeobj.sh自动生成
############################################################
# 项目名 : 
# 模块名 : 
# 备  注 : 
############################################################

###### 源文件配置区
# 编译宏
AR		=	ar
AFLAGS		=	rv
SOFLAGS		=	-shared
ESOFLAGS	=	-rdynamic	

# c源代码文件宏及推导规则
CC		=	gcc -g -fPIC -O2 -Wall -Werror -fno-strict-aliasing
CC_NOWARN	=	gcc -g -fPIC -O2

c_FILE_o	=	$(c_FILE:.c=.o)
c_FILE2_o	=	$(c_FILE2:.c=.o)
c_FILE3_o	=	$(c_FILE3:.c=.o)
c_FILE4_o	=	$(c_FILE4:.c=.o)
c_FILE5_o	=	$(c_FILE5:.c=.o)
c_FILE_CLEAN	=	$(c_FILE_o) $(c_FILE2_o) $(c_FILE3_o) $(c_FILE4_o) $(c_FILE5_o)

.SUFFIXES:.c
.c.o	:
	$(CC) $(CFLAGS) -c $<

c_FILE		=	\
			logpipe-input-file.c \
			logpipe-output-file.c \
			logpipe-input-tcp.c \
			logpipe-output-tcp.c \
			logpipe-input-exec.c \
			logpipe-output-hdfs.c \
			logpipe-output-ek.c \
			logpipe-output-kafka.c \
			logpipe-output-ingeek.c \

###### 目标文件、安装目录配置区
include makeinstall
LIB		=	\
			logpipe-input-file.so \
			logpipe-output-file.so \
			logpipe-input-tcp.so \
			logpipe-output-tcp.so \
			logpipe-input-exec.so \
			logpipe-output-ek.so \
			logpipe-output-ingeek.so \

LIBINST		=	$(_LIBINST)

###### 编译选项
CFLAGS		=	$(_CFLAGS) \
			-std=gnu99 \
			-I$(HOME)/include/logpipe \

###### 链接选项
LFLAGS		=	$(_LFLAGS) \
			-L$(HOME)/lib \
			-llogpipe_api \
			-rdynamic \
			-lm \

###### 额外宏定义区
CLEAN_ADDITION	=	fasterhttp.o \
			logpipe-output-hdfs.so \
			logpipe-output-kafka.so \
			logpipe-output-ingeek.so \

###### 加载mktpl模板库
# 最终目标列表
all		:	$(OBJ) $(OBJ2) $(LIB) $(LIB2) $(SQL) $(NOINST_OBJ) $(BIN) $(BIN2)

prepro_all	:	$(PREPRO)


# 文件系统宏
CD		=	cd
RM		=	rm -f
CP		=	cp -rf
MV		=	mv -f
MKDIR		=	mkdir -p

# 预定义源文件清理删除关联宏
_FILE_CLEAN	=	$(c_FILE_CLEAN) $(cpp_FILE_CLEAN) $(SQC_FILE_CLEAN) $(ec_FILE_CLEAN) $(ec_FILE2_CLEAN) $(csm_FILE_CLEAN) $(c_html_FILE_CLEAN) $(cui_FILE_CLEAN) $(dtd_FILE_CLEAN) $(prt_FILE_CLEAN) $(fmd_FILE_CLEAN) $(smd_FILE_CLEAN) $(def_FILE_CLEAN) $(act_FILE_CLEAN) $(sml2c_FILE_CLEAN)

# 清理删除规则
.PHONY:clean
clean		:
	@for FILE in $(_FILE_CLEAN) $(BIN) $(BIN2) $(LIB) $(LIB2) $(OBJ) $(OBJ2) $(NOINST_OBJ) $(CLEAN_ADDITION) ; do \
		echo $(RM) $$FILE ; \
		$(RM) $$FILE ; \
	done


# 预定义源代码缺省头文件宏
DFTHDER		=	$(csm_FILE_DFTHDER) $(cui_FILE_DFTHDER) $(dtd_FILE_DFTHDER) $(prt_FILE_DFTHDER) $(fmd_FILE_DFTHDER) $(smd_FILE_DFTHDER) $(def_FILE_DFTHDER) $(act_FILE_DFTHDER) $(sml2c_FILE_DFTHDER)

# 提交安装规则
.PHONY:install
install		:	all

ifneq ($(strip $(LIBINST)),)
	@if [ ! -d "$(LIBINST)" ] ; then \
		echo $(MKDIR) $(LIBINST) ; \
		$(MKDIR) $(LIBINST) ; \
	fi
ifneq ($(strip $(LIB)),)
	@for FILE in `echo $(LIB)` ; do \
		if [ -f $(LIBINST)/$$FILE ] ; then \
			echo $(RM) $(LIBINST)/$$FILE ; \
			$(RM) $(LIBINST)/$$FILE ; \
		fi ; \
		if [ -f $$FILE ] ; then \
			echo $(CP) $$FILE $(LIBINST)/ ; \
			$(CP) $$FILE $(LIBINST)/ ; \
		fi ; \
	done
endif
endif
ifneq ($(strip $(LIBINST2)),)
	@if [ ! -d "$(LIBINST2)" ] ; then \
		echo $(MKDIR) $(LIBINST2) ; \
		$(MKDIR) $(LIBINST2) ; \
	fi
ifneq ($(strip $(LIB2)),)
	@for FILE in `echo $(LIB2)` ; do \
		if [ -f $(LIBINST2)/$$FILE ] ; then \
			echo $(RM) $(LIBINST2)/$$FILE ; \
			$(RM) $(LIBINST2)/$$FILE ; \
		fi ; \
		if [ -f $$FILE ] ; then \
			echo $(CP) $$FILE $(LIBINST2)/ ; \
			$(CP) $$FILE $(LIBINST2)/ ; \
		fi ; \
	done
endif
endif


# 预定义源代码缺省头文件宏
DFTHDER		=	$(csm_FILE_DFTHDER) $(cui_FILE_DFTHDER) $(dtd_FILE_DFTHDER) $(prt_FILE_DFTHDER) $(fmd_FILE_DFTHDER) $(smd_FILE_DFTHDER) $(def_FILE_DFTHDER) $(act_FILE_DFTHDER) $(sml2c_FILE_DFTHDER)

# 提交安装规则
.PHONY:uninstall
uninstall		:

ifneq ($(strip $(LIB)),)
ifneq ($(strip $(LIBINST)),)
	@for FILE in `echo $(LIB)` ; do \
		if [ -f $(LIBINST)/$$FILE ] ; then \
			echo $(RM) $(LIBINST)/$$FILE ; \
			$(RM) $(LIBINST)/$$FILE ; \
		fi ; \
	done
endif
endif
ifneq ($(strip $(LIB2)),)
ifneq ($(strip $(LIBINST2)),)
	@for FILE in `echo $(LIB2)` ; do \
		if [ -f $(LIBINST2)/$$FILE ] ; then \
			echo $(RM) $(LIBINST2)/$$FILE ; \
			$(RM) $(LIBINST2)/$$FILE ; \
		fi ; \
	done
endif
endif


###### 目标文件依赖关系
logpipe-input-file.so		:	logpipe-input-file.o
	$(CC) -o $@ logpipe-input-file.o $(SOFLAGS) $(LFLAGS)

logpipe-output-file.so		:	logpipe-output-file.o
	$(CC) -o $@ logpipe-output-file.o $(SOFLAGS) $(LFLAGS)

logpipe-input-tcp.so		:	logpipe-input-tcp.o
	$(CC) -o $@ logpipe-input-tcp.o $(SOFLAGS) $(LFLAGS)

logpipe-output-tcp.so		:	logpipe-output-tcp.o
	$(CC) -o $@ logpipe-output-tcp.o $(SOFLAGS) $(LFLAGS)

logpipe-input-exec.so		:	logpipe-input-exec.o
	$(CC) -o $@ logpipe-input-exec.o $(SOFLAGS) $(LFLAGS)

fasterhttp.o			:	fasterhttp.c
	$(CC) $(CFLAGS) -c fasterhttp.c

CFLAGS_hdfs			=	$(CFLAGS) -I/home/hdfs/expack/hadoop/include

logpipe-output-hdfs.o		:	logpipe-output-hdfs.c
	$(CC) $(CFLAGS_hdfs) -c logpipe-output-hdfs.c

LFLAGS_hdfs			=	$(LFLAGS) -L/home/hdfs/expack/hadoop/lib/native -lhdfs -L$(HOME)/expack/jdk1.8.0_152/jre/lib/amd64/server -ljvm

logpipe-output-ek.so		:	logpipe-output-ek.o fasterhttp.o
	$(CC) -o $@ logpipe-output-ek.o fasterhttp.o $(SOFLAGS) $(LFLAGS)

logpipe-output-hdfs.so		:	logpipe-output-hdfs.o
	$(CC) -o $@ logpipe-output-hdfs.o $(SOFLAGS) $(LFLAGS_hdfs)

CFLAGS_kafka			=	$(CFLAGS) -I$(HOME)/include/librdkafka

logpipe-output-kafka.o		:	logpipe-output-kafka.c
	$(CC) $(CFLAGS_kafka) -c logpipe-output-kafka.c

LFLAGS_kafka			=	$(LFLAGS) -L$(HOME)/lib -lrdkafka

logpipe-output-kafka.so		:	logpipe-output-kafka.o
	$(CC) -o $@ logpipe-output-kafka.o $(SOFLAGS) $(LFLAGS_kafka)

logpipe-output-ingeek.so	:	logpipe-output-ingeek.o
	$(CC) -o $@ logpipe-output-ingeek.o $(SOFLAGS) $(LFLAGS)

